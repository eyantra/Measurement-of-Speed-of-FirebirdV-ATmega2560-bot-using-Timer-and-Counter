C51 COMPILER V8.08   MAIN                                                                  09/16/2010 16:32:07 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1                                                                                             /*****************************************************************************
   2           This programme counts encoder pulses from the right motor's position encoder using at Timer 1 as counter 
             -1 at 
   3           its external clock pin,  compares them to a required distance and stops robot after covering predefined d
             -istance.  
   4           *******************************************************************************/
   5          
   6          #include <intrins.h>
   7          #include "p89v51rx2.H"
   8          
   9          
  10          sbit LB=P1^0;  //LEFT BACK Pin
  11          sbit LF=P1^1;  //LEFT FRONT Pin
  12          sbit RF=P1^2;  //RIGHT FRONT Pin
  13          sbit RB=P3^4;  //RIGHT BACK Pin
  14          sbit left_velocity=P1^3; //Left velocity control pin. 
  15          sbit right_velocity=P1^4; //Right velocity control pin. 
  16          
  17          unsigned int right_shaft_count=0; //variable used to store pulse count from right position encoder
  18          unsigned int count=0;
  19          unsigned int speed=0;
  20          
  21          sbit RS=P2^6; //Register Select
  22          sbit RW=P2^5; //Read Write
  23          sbit EN=P2^4; //Enable line
  24          sbit buzzer=P2^7; //Buzzer Pin
  25          
  26          
  27          const unsigned char LCD_CLEAR     = 0x01;       /* Clear display screen */  
  28          const unsigned char CURSOR_HOME   = 0x02;       /* Return Home (First line first block) */
  29          const unsigned char DISPLAY_ON    = 0x0F;       /* Display ON cursor Blinking */
  30          const unsigned char LINE1         = 0x80;       /* Address for Line 1 */ 
  31          const unsigned char LINE2         = 0xC0;       /* Address for Line 2 */
  32          
  33          const unsigned char CURSOR_LEFT   = 0x10;       /* Decrement cursor (shift cursor to left) */
  34          const unsigned char CURSOR_RIGHT  = 0x14;       /* Increment cursor (shift cursor to right) */
  35          const unsigned char DISPLAY_LEFT  = 0x18;       /* Shift the entire display to left */ 
  36          const unsigned char DISPLAY_RIGHT = 0x1C;       /* Shift the entire display to right */
  37          const unsigned char DOFF_COFF     = 0x08;       /* Display OFF cursor OFF */
  38          const unsigned char DON_COFF      = 0x0C;       /* Display ON cursor OFF */
  39          
  40          const unsigned char TEST          = 0xC6;       /* TEST */
  41          
  42           void delay_ms(unsigned int ms)         // Delay Function
  43          {
  44   1       unsigned int i, j;
  45   1       
  46   1       for(i=0;i<ms;i++)
  47   1              for(j=0;j<53;j++);
  48   1      } 
  49          
  50          void pulse(void)         //Generating Hi-Low Pulse for Enable Pin
  51          {
  52   1       EN=1;
  53   1       delay_ms(4);
C51 COMPILER V8.08   MAIN                                                                  09/16/2010 16:32:07 PAGE 2   

  54   1       EN=0;
  55   1      }
  56          
  57          void LCD_CMD(unsigned char cmd)          //Function To Send Command
  58          {
  59   1       P2=(0x00|0x80);
  60   1       EN=0;                                                          
  61   1       RS=0;                                                          // Command Register Select
  62   1       //RW=0;
  63   1      
  64   1       P2=(((cmd&0xF0)/0x10)|0x80);           // Send Higher Bits
  65   1       pulse();
  66   1      
  67   1       P2=((cmd&0x0F)|0x80);                          // Send Lower Bits
  68   1       pulse();
  69   1      }
  70          
  71          void LCD_INIT(void)
  72          {
  73   1       EN=0;
  74   1       RS=0;                          // Command Register Select
  75   1       //RW=0;
  76   1       P2=(0x02|0x80);                // 4 bit mode
  77   1       pulse();
  78   1       LCD_CMD(LCD_CLEAR);             // Clear LCD 
  79   1       LCD_CMD(DISPLAY_ON);
  80   1       LCD_CMD(CURSOR_HOME);
  81   1      }
  82          
  83          void LCD_CHAR(unsigned char dat)   //Function for Character write
  84          {
  85   1       P2=(0x40|0x80);
  86   1       EN=0;
  87   1       RS=1;                                  // Data Register Select
  88   1       //RW=0;
  89   1       P2=((((dat&0xF0)/0x10)|0x40)|0x80);      // Send Higher Bits
  90   1       pulse();
  91   1      
  92   1       P2=(((dat&0x0F)|0x40)|0x80);                     // Send Lower Bits
  93   1       pulse();
  94   1      }
  95          
  96          void LCD_WRITE(unsigned char *dat)                // Function to write Character String
  97          {
  98   1       unsigned char i;
  99   1      
 100   1       for(i=0;i<16;i++)
 101   1       {
 102   2              if(*dat!='\0')
 103   2              {
 104   3                      LCD_CHAR(*dat);                                  // Sending each character of string to print
 105   3                      dat++;
 106   3              }
 107   2              else
 108   2              {
 109   3                      break;
 110   3              }
 111   2       }
 112   1      }
 113          
 114          
 115          
C51 COMPILER V8.08   MAIN                                                                  09/16/2010 16:32:07 PAGE 3   

 116          //initializing timer/counter1 as counter in mode 2
 117          void  timer_setup(void)   
 118                  {
 119   1              TMOD=0x61;  // Timer 1 in 8 bit external counter mode
 120   1              TH1=0; // reset counter value to 0       
 121   1              TL1=0;  // reset counter value to 0  
 122   1              TH0=0;
 123   1              TL0=0;
 124   1              }
 125          
 126          void int_setup(void)
 127                  {
 128   1               IEN0=0x02;                // Enable timer interrupt.
 129   1              }
 130          
 131          void forward(void)
 132                  {
 133   1              RF=1;
 134   1              LF=1;
 135   1              RB=0;
 136   1              LB=0;
 137   1              }
 138          
 139          void calc_speed(void)
 140                  {
 141   1              speed = (unsigned int)((right_shaft_count*5.44));         //5.44 mm shaft multiplyied by no of count.
 142   1              }
 143          
 144          void disp_speed (void)
 145                  {
 146   1              unsigned char speed_arry[3];                      // 3digit arry for velocity
 147   1              unsigned char dat=0;
 148   1              unsigned int val=0;
 149   1              LCD_CMD(LINE1);
 150   1              val=speed;
 151   1                                                                                                      // for hundred 
 152   1              speed_arry[2]=(val/100)+48;
 153   1              speed_arry[1]=val/10;
 154   1              speed_arry[1]=(speed_arry[1]%10)+48;             // for tens
 155   1              speed_arry[0]= (val % 10) + 48;                          // for unit
 156   1      
 157   1              LCD_CMD(TEST);                                                           //  to set cursor position
 158   1      
 159   1              dat=speed_arry[2];
 160   1              LCD_CHAR(dat);
 161   1              dat=speed_arry[1];
 162   1              LCD_CHAR(dat);
 163   1              dat='.' ;
 164   1              LCD_CHAR(dat);
 165   1              dat=speed_arry[0];
 166   1              LCD_CHAR(dat);
 167   1      
 168   1              }
 169          
 170          void int1_isr(void)interrupt 1
 171                  {
 172   1              EA=0;             // desable interrupt 
 173   1              TR0=0;             // stop timer 0
 174   1              count++;                 // increment variable 
 175   1              if (count == 20)  // if this is 20 menance the 1 second completed so calc speed and display it
 176   1                      {
 177   2                      
C51 COMPILER V8.08   MAIN                                                                  09/16/2010 16:32:07 PAGE 4   

 178   2                      count=0;
 179   2                      calc_speed();
 180   2                      disp_speed();
 181   2                      TH1=0;
 182   2                      TL1=0;
 183   2                      }
 184   1              TH0=0x3C;                       // set again timer for 50 ms 
 185   1              TL0=0xAF;
 186   1              EA=1;                           // enable interrupt     
 187   1              TR0=1;                          // start timet again
 188   1              TF0=0;                          // reset timer interrupt flag
 189   1              }
 190          
 191          
 192          void main()
 193                  {
 194   1              unsigned int distance=0;
 195   1              unsigned int reqd_shaft_count_int=0;
 196   1              LCD_INIT();                       // LCD initialization 
 197   1              LCD_CMD(DON_COFF);        // Curssor off
 198   1              timer_setup();          //Timer  initialization  Timer 1 as a counter and Timer 0 as Timer 
 199   1              int_setup();            // Enable timer interrrupt
 200   1       
 201   1        
 202   1              left_velocity=0; //setting this pin to one sets the motor to run at maximum velocity. Here enable pin of 
             -Motor driver is always on unlike in PWM mode.
 203   1              right_velocity=1;//setting this pin to one sets the motor to run at maximum velocity. Here enable pin of
             - Motor driver is always on unlike in PWM mode
 204   1       
 205   1              LCD_CMD(LINE1);                                          //      Curssor at 1st position line 1
 206   1              LCD_WRITE("***FireBird V***");           //  Wel-Come msg.
 207   1              LCD_CMD(LINE2);
 208   1              LCD_WRITE("Vel. mesurement");
 209   1              delay_ms(5000);
 210   1              LCD_CMD(LINE2);                                           
 211   1              LCD_WRITE("Vel =      cm/s");
 212   1                                                
 213   1              TR1=1;  //start timer 1 as a Counter
 214   1              TR0=1;  //Start timer 1 
 215   1              EA=1;   // Enable interrupt for timer 0
 216   1              forward();  //set the robot to move forward     
 217   1         
 218   1              while(1)
 219   1                      {
 220   2                      right_shaft_count=TL1;     // Move count no in to variable
 221   2                      }
 222   1              }                                                       //main ends


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    523    ----
   CONSTANT SIZE    =     49    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
